import nltk
import os
import matplotlib

# Download necessary NLTK data (only run once)
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')

# Fix display issue for matplotlib tree visualization (optional)
if os.environ.get('DISPLAY', '') == '':
    print('No display found. Using :0.0')
    os.environ['DISPLAY'] = ':0.0'

matplotlib.use('Agg')  # Use non-interactive backend for safer rendering

# Preprocessing function: tokenize, POS tag
def preprocess(text):
    sentences = nltk.sent_tokenize(text)
    sentences = [nltk.word_tokenize(sent) for sent in sentences]
    sentences = [nltk.pos_tag(sent) for sent in sentences]
    return sentences

# Sample sentence
sentence = "The blogger taught the reader to chunk"
processed_sentence = preprocess(sentence)

# Define a simple grammar rule for noun phrases (NP)
grammar = "NP: {<DT>?<JJ>*<NN>}"

# Create chunk parser
chunk_parser = nltk.RegexpParser(grammar)

# Apply chunking to the first sentence
chunked_tree = chunk_parser.parse(processed_sentence[0])

# Print the result tree structure
print("\nChunked Tree:\n")
print(chunked_tree)

# Optional: Pretty print tree structure in terminal
print("\nPretty Printed Tree:\n")
chunked_tree.pretty_print()



import re

text = """
John's email is john.doe@example.com and he lives in New York.
You can also contact him at +1-202-555-0187. He works at OpenAI.
"""

# Extract email
emails = re.findall(r'\b[\w\.-]+@[\w\.-]+\.\w+\b', text)

# Extract phone numbers
phones = re.findall(r'\+\d{1,2}-\d{3}-\d{3}-\d{4}', text)

# Extract capitalized words (e.g., Names or Locations)
caps = re.findall(r'\b[A-Z][a-z]+\b', text)

print("Emails:", emails)
print("Phone Numbers:", phones)
print("Capitalized Words:", caps)
